import {
    createUserWithEmailAndPassword,
    signInWithEmailAndPassword,
    updateProfile,
    sendEmailVerification,
    GoogleAuthProvider,
    signInWithRedirect,
    signOut,
  } from "firebase/auth";
  //firestore database
import {
    addDoc,
    collection,
    deleteDoc,
    doc,
    getDoc,
    getDocs,
    query,
    setDoc,
    updateDoc,
    where,
  } from "firebase/firestore";
import { firebaseAuth,firestoreDB } from "./firebaseInit";

 
 //user authentication signup
 export const signupUserWithEmailAndPassword = async (email, password) => {
    const userCrediential = await createUserWithEmailAndPassword(
      firebaseAuth,
      email,
      password
    );
    return userCrediential;
  };
  //user authentication signin
  export const loginUserWithEmailAndPassword = async (email, password) => {
	const userCrediential= await signInWithEmailAndPassword(firebaseAuth, email, password);
	return userCrediential;  
};
  //user signin with google
  export const signInWithGoogle = async () => {
    const googleProvider = new GoogleAuthProvider();
    await signInWithRedirect(firebaseAuth, googleProvider);
  };
  //update authenticated user data
  export const updateAuthenticatedUserData = async (updateData) => {
    await updateProfile(firebaseAuth.currentUser, updateData);
  };
  export const logoutUser = async () => {
    await signOut(firebaseAuth);
  };

  //sent verification on email
  export const sentUserEmailVerification = () => {
    sendEmailVerification(firebaseAuth.currentUser)
      .then(() => alert("email verification sent please check"))
      .catch((error) => console.error(error));
  };
//   //add/update in realtime database
//   const putData = (key, data) => set(ref(database, key), data);

  //add data to firestore collection
  export const addDataToFirestore = async (collectionName, data) => {
    await addDoc(collection(firestoreDB, collectionName), data);
  };
  //add/update data to firestore collection with a reference
  export const setDataToFirestoreRef = async (collectionName, reference, data) => {
    await setDoc(doc(firestoreDB, collectionName, reference), data);
  };
  //add/update data to firestore collection with no reference(autogenerated)
  export const setDataToFirestoreNoRef = async (collectionName, data) => {
    await setDoc(doc(collection(firestoreDB, collectionName)), data);
  };
  //update data from firestore collection with a reference
  export const updateDataFromFirestore = async (collectionName, reference, data) => {
    await updateDoc(doc(firestoreDB, collectionName, reference), data);
  };
  //delete data from firestore collection with a reference
  export const deleteDataFromFirestore = async (collectionName, reference) => {
    await deleteDoc(doc(firestoreDB, collectionName, reference));
  };
  
  //get multiple document data of a collection using "where" keyword to compare a key value from database
  export const getMultipleDocsFromFirestore = async (collectionName, key, value) => {
    let data = [];
    const querySnapshot = await getDocs(
      query(collection(firestoreDB, collectionName), where(key, "==", value))
    );
    querySnapshot.forEach((doc) => {
      data.push(doc.data());
    });
    return data;
  };
  //get all document data of a collection from firebase
  export const getAllDocsFromFirestore = async (collectionName) => {
    let data = [];
    const querySnapshot = await getDocs(
      query(collection(firestoreDB, collectionName))
    );
    querySnapshot.forEach((doc) => {
      data.push(doc.data());
    });
    return data;
  };
//get a document data from firestore collection with a reference
export const getADocsFromFirestore = async (collectionName, reference) => {
    const docSnap = await getDoc(doc(firestoreDB, collectionName, reference));
    if (docSnap.exists()) {
      return docSnap.data();
    } else {
      return "Document doesn't exist!";
    }
  };